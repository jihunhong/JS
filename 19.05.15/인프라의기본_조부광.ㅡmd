___<웹 엔지니어가 알아야 할 인프라의 기본>___
>  __Topic 웹 서비스에 필요한 인프라 영역의 기술과 지식__


## CH1. 웹서비스에서 인프라의 역할

#### 1.1 웹 서비스 구축에 관련된 인프라 영역
- 일반적인 웹 서비스 구축 시에 다루게 되는 코로케이션 부터 미들웨어까지의 계층을 말한다.
- 인프라 기술은 계층 구조로 되어 있다
- 클라우드 서비스의 등장으로 기기의 조달에 소요되는 시간이 단축되었다.

#### 1.2 인프라의 요건 정의에서 운용까지의 주의점
- 인프라 흐름
_요건정의 - 설계 - __조달__ - 구축 - 운용_

- 인프라는 시스템의 그릇을 결정하는 중요한 요소이므로, 확장성, 대중화, 규모 등을 미리 예상하고 구성할 필요가 있다.

#### 1.3 설계시 주의점
- 다양한 물리적 제약과 사용자의 요구사항을 조율하는 것이 중요하다. 
- 요건은 __기능적 요건__ 과 __비 기능적 요건__ 으로 나눌수 있다

`기능적 요건 정의의 주의점`
- 기능적요건은 초기단계에 구체화하지 않는 경우가 많다. 
- 대체로 비 기능적 요건을 구현하기 위한 수단이 먼저이며, 그 후에 비기능적요건을 구현하기 위해 확정
- 조달 단계에 들어설 때는 비 기능적 요건이 기능적 요건이 되어야만 한다.

`비 기능적 요건 정의의 주의점`
- 요건의 정의에 누락이 발생하지 않는 것이 중요.
- IPA가 공개하고 있는 `비 기능적 요구 수준` 을 참고
- 구현할 기능이 동일하다면 품질과 비용, 납기는 균형을 맞추는 것이 프로젝트 관리의 기본

 `신뢰성 확보하기`
 - 신뢰성 지표 : `RAS`, `RASIS`
  - Reliability 신뢰성
  - Availability 가용성
  - Serviceability 유지보수성
  - Integrity 무결성
  - Security 안전성 
  (+ 성장 및 철수)

#### 1.4 RAS 검토하기
```
- 가동률 = MTBF / (MTBF+MTTR)
- 장애 발생 간격 MTBF = 누적사용시간/고장횟수
- 평균 복구 시간 MTTR = 누적수리시간/고장횟수
```
##### `가동률을 높이는 방법`
1. 요소 각각의 가동률을 높인다.
2. 요소를 조합해 전체의 가동률을 높인다.
3. 적절한 프로비저닝으로 부하 문제를 피한다.


```
- 가동률을 높이기 위한 기본적 개념 
  - 다중화 
    - 시스템의 어느 구정 요소에 장애가 발생한 경우 다른 구성 요소가 그 처리를 넘겨 받아 시스템 전체의 가용성을 높이는 것 
    => MTTR이 짧아지기도 하며, '0'이 되기도 함
    - 단일 장애 포인트(다중화 되어 있지 않은 단일 구성 요소)를 없애거나
    - MTBF를 길게, MTTR을 짧게 하는 방향으로 조정
    - 누락을 방지하는 것이 매우 중요 - 데이터의 흐름에 따라 생각하면 수월하다.
    ex) 스마트폰용 웹 시스템 : 단말기 ,전파, 네트워크, 회선사업자, 라우터 ,,, 서버디스크, 프로그램 
  - 가동률을 높이기 위해서는 `특별한 경우에 어느 정도로 대처할 것인지` 결정하는 것이 중요 
  - `N+1구성 ` : 서비스 제공을 위해 필요한 장비의 최소 대수가 N이면 평상시의 최소 대수는 N+1이 된다.
    - N+1이 N이 된 다음 다시 N+1이 될 때까지가 '장애대응' 이다.
```

 __1. 요소 각각의 가동률을 높게 한다.__
- 서버용 부품을 사용하기
  - MTBF가 길어진다.
  - 전용장소(데이터 센터)에 서버를 설치하는 것도 효과적
- 부품을 이중화하기
  - 동시에 공장 나지 않는 한 서비스가 중지되지 않는다.
  - 부품 단위 다중화 : __디스크의 RAID 구성, 전원 장치의 이중화__ 
  - 저렴한 상용제품 사용과 여러 요소를 다중화 기술등으로 조합하는 것이 효과적 
- 요소 각각의 가동률을 확인하기
  - 가동률은 필요 요소 중에서 가동률이 가장 낮은 요소의 가동률로 결정된다. 
  
  


__2. 요소를 조합해 전체의 가동률을 높인다.__
- 다중화 기술을 이용하여 가동률을 높이기
  - 다중화 구성 : 'Active-Active' 와 'Active-Standby'
  - 'Active-Active' 가 가장 가동률이 높아진다.
  - Stateless 방식의 요소는 'Active-Active' 쉽게 구현 가능
  - 데이터를 저장하는 부분을 'Active-Active'로 하면 대개는 데이터 정합성 유지를 위해 동기화가 필요하기 때문에 동작이 느려지는 것 주의
  
 
__3. 적절한 프로비저닝으로 부하 문제를 피한다.__
- 프로비저닝 => 사용자 수 등을 예측하여 적절하게 리소스를 준비하는 것 
  - 웹을 사용하는 일반적인 BtoC서비스는 부하를 예측하기 어렵다 
- 스케일 업과 스케일 아웃
  - Scale Up : 서버 등 각 요소의 성능을 향상시키는 방법
  - Scale Out : 서버 등 각 요소의 수를 늘리는 방법 
  - 어느 정도의 규모까지는 스케일 업이 좋지만, 일정 법위를 넘어서는 순간 비용대비 효과가 나빠진다.
  - 웹 서버 등은 스케일 아웃이 가능하게 하는 것이 일반적인
  - 클라우드 기반을 이용해 오토 스케일 등의 자동 스케일링 설정 가능 
  - 순식간에 증가했다 금방 가라 않는 경우 대비 
  - 부하의 관점에서도 최소한 N+1 혹은 N+2
  - 튜닝과 부하 분한 방법- 7,8장
  
  

##### `고장 발생 시의 대응 방법`
- 어떤 대응을 할 것인지 미리 결정해 두면 원활한 대응이 가능하다. 

##### `대규모 재해 시의 대응 방법`
- 사업소의 배치, 이용자의 배치, 재해 발생 직후 시스템의 역할과 가치 고려해서 판단한다.
- 대응범위 및 전환방법 




