# JS STUDY 0507
----
#### Chapter 13 - 웹브라우저의 자바스크립트
>13장 웹브라우저의 자바스크립트 양승준
 14장 Window 객체 조부광
 15장 문서 스크립팅 홍지훈
 16장 CSS 이인행
 17장 이벤트다루기 박종억

###### 서론
* 클라이언트 측 자바스크립트 1부까지가 실행 환경이 정의되지 않은 자바스크립트 코드 조각 이었다면 이장은 컨텍스트 이다.
  이 장에서는 클라이언트 측 자바스크립트에 대한 개요로 시작하고. 간단한 예제를 통해 웹 문서와 웹 애플리케이션에서 자바스크립트의
  역할을 설명한다.그리고 각 2부의 각 장에 대해 설명하고 , 이후 절들은 자바스크립트 코드가 어떻게 html문서에 내장되고 실행되는지에 대한 중요한 상세 내용을 설명한다.

##### 13.1 클라이언트 측 자바스크립트

* Window 객체
  * 클라이언트 측 자바스크립트의 기능과 api에서 핵심적인 진입점이다.
    이 객체는 웹브라우저의 창이나 프레임을 나타내고, 따라서 특정 창을 Window 객체로 참조 가능하다.
    location과 같은 프로퍼티들을 제공하는데, 이 객체는 창에 현재 보이는 url을 나타내고 또한 새로 주어진 url을 불러올 수 있게 해준다.
    ```js
    window.location = "http://www.oreilly.com" //새로운 웹 페이지로 보내기 위해 location 프로퍼티에 값 설정
    ```

* alert 객체, setTimeout 객체
  * 대화상자에 메시지를 보여주는 alert, 지정된 시간 후에 실행될 함수를 등록하는 setTimeout() 같은 메서드 제공
    ```js
    setTimeout(function(){alert("hello world");},2000); //2초후에 hello world 메시지 노출
    ```

* **앞의코드에서 window가 사용되지 않았음을 주의해야하는데 클라측 자바스크립트에서는 window객체가 전역객체이다**
* document 객체
  * window 객체의 가장 중요한 프로퍼티 중 하나인 document는 창에 표시된 내용에 해당하는 document객체를 참조한다. document 객체에는, 주어진 id 속성값을 가진 문서 요소를 반환하는
    getElementById()와 같은 중요한 메서드들이 있다.
    > 문서요소란 html 태그 쌍과 그안의 내용 전부를 담고 있는 html 요소이다.

    ```js
    var timestamp = document.getElementById("timestamp");
    ```

* getElementById가 반환하는 Element객체(위로 따지면 timestamp 객체)
  * 이 객체에는 내용을 가져오고 속성값을 지정할 수 있는 또 다른 주요 프로퍼티와 메서드가 존재한다.

    ```js
    if(timestamp.firstChild == null)
      timestamp.appendChild(document.createTextNode(new Date().toString()));
      //요소가 비어있으면 이 안에 최근 날짜와 시간을 넣는다.

    timestamp.style.backgroundColor = "yellow"; // 스타일 지정한다.
    timestamp.className = "highlight"; //클래스네임바꾼다
    ```

* 이벤트 핸들러 프로퍼티도 window,document,element 객체의 중요한 프로퍼티인데, 어떤 이벤트가 발생할 때 비동기로 호출할 함수를 지정할 수 있다. 꾸미기 위해 동작을 수정하는 코드를 넣을 수 있으며 해당 프로퍼티의 이름은 on으로 시작한다.

  ```js
  timestamp.onclick = function(){this.innerHTML = new Date().toString();}
  //사용자가 클릭했을때 요소의 내용 갱신
  ```

* 이벤트 핸들러 인 onload 핸들러는 이 핸들러는 창에 보이는 문서 내용이 더 이상 불러올 것이 없는 안정된 상태여서 문서 내용을 마음대로 조작할 준비가 되었을 때 작동한다.(378p 참조)

##### 13.1.1 웹문서의 자바스크립트

* 컨테이너 역할을 하는 document 객체와 element객체를 통해서 js 프로그램은 문서 내용을 탐색하고 조작할 수 있다.
css의 스타일과 클래스를 사용하여 내용을 표현하는 방식을 변경할 수 있고, 적절한 이벤트 핸들러를 등록해서 document 요소의 동작을 정의할 수 있다.
스크립팅 가능한 내용과 표현, 동작을 모두 합쳐서 `동적HTML` 또는 `DHTML` 이라고 한다.
**웹 문서 안에서는 되도록 JS를 적게 사용해야한다**
  > JS의 적절한 역할은 정보 취득이나 전송을 더 쉽게 만들어서 사용자의 인터넷 사용 경험을 높이는 것이다.

##### 13.1.2 웹 애플리케이션의 자바스크립트

* 웹 브라우저를 운영체제랑 비슷하다는 점을 꺠우쳐야된다. 379p 참조
  이러이러해서 우리는 브라우저가 제공하는(네트워킹,그래픽,데이터스토리지) 확장된 서비스를 이용하기 위해 자바스크립트를 사용한 웹 페이지를 `웹 애플리케이션`이라고 정의할 수 있다.
  확장된 서비스 중 가장 유명한 것은 XMLHttpRequest 객체다. 이 객체를 이용해서 HTTP 요청을 짜면 브라우저 외부와 네트워킹을 할 수 있다.
  웹 앱은 페이지를 다시 불러오지 않고도 서버에서 새로운 정보를 가져오기 위해 이 서비스를 사용한다. 이런 일을 하는 웹 애플리케이션을 보통 `에이젝스(Ajax)`라고 한다

##### 13.2 HTML 안에 자바스크립트 포함하기

* 클라 측 JS를 HTML 문서 안에 내장하는 방법은 4가지이다.
  * <SCRIPT></SCRIPT> 태그 안에 직접 작성.
  * <SCRIPT> 태그의 SRC속성에 별도 파일로 정의.
  * onclick 이나 onmouseover 같은 html 이벤트 핸들러 속성 안에 작성
  * javascript:라는 특별한 프로토콜을 사용해서 url 안에 작성.

##### 13.2.1 \<script>요소에 직접 작성.
  * 381p 참조.

##### 13.2.2 외부 파일의 스크립트
  * url을 지정해서 사용한다.
    ```js
    <script src="..../util.js"></script>
    //util.js에는 순수하게 자바스크립트만 있어야 한다. <script>,html 같은것이 있으면 안된다.
    ```
  * 외부 파일을 스크립트 하는것의 장점
    * 코드상의 거대한 자바스크립트 영역이 제거되어 파일이 간단해지고 내용과 동작의 구분을 돕는다.
    * 여러 웹페이지가 스크립트 코드를 공유할 때 스크립트해서 사용하면 하나의 소스만 유지하고 코드 바뀔 떄마다 여러
      html문을 수정안해도된다.
    * 여러 페이지에서 공유한다고 해도 사용한 첫 페이지에서만 한번 내려받고 다음페이지는 브라우저 캐시에서 참조 (빠르다)
    * 어떤 웹 서버의 프로그램이나 다른 웹 서버에서 출력되는 코드를 사용할 수 있다 (인터넷 광고 활용)

  * 어떤 서버에서 스크립트 문서를 제공하고 이 문서를 다른 서버에서 받았을때 실행과 관련하여 중요한 보안 위험이 있다. 조금있다가 나올 13.6.2에서 설명할 동일 출처 보안 정책은 한 도메인 내 문서의 자바스크립트가 다른 도메인의 문서와 상호작용하는 것을 방지한다.

##### 13.2.3 스크립트 타입
  * 오직 IE만 지원하는 VBScript같은 비표준 스크립트 언어를 사용하고 싶다면 type 속성을 사용하여 스크립트 mime타입을 정의해야한다.
  ```js
  <script type="text/vbscript">
    vbscript 작성~~~~~
  </script>
  //type 속성의 기본값은 'text/javascript' 인데 굳이 필요하지 않다.

  <script language="text/vbscript">
    vbscript 작성~~~~~
  </script>
  //위의 language 속성은 폐기 되었다.

  ```

##### 13.2.4 html안의 이벤트 핸들러
  * html안에 포함된 js 코드는 웹브라우저가 html 파일을 불러올 때 한번 실행된다. html파일을 불러온 이후에 무언가 상호작용이 일어나게 하기 위해선,ㄴ 자바스크립트 프로그램이 반드시 이벤트 핸들러를 정의해야 한다.!!
  자바스크립트 코드에서 이벤트 핸들러를 등록할 때 사용하는 프로퍼티 중 onclick 같은 몇가지는 html에 같은 이름의 속성이 있다. 밑의 예제는 사용자가 체크박스의 체크 상태를 변경했을 때 적용할 이벤트 핸들러를 정의하기 위해, 체크박스 html 요소의 onclick 속성에 핸들러 코드를 명시할 수 있다.
  ```js
  <input type-"checkbox" name="options" value="giftwrap" onchange="order.options. giftwrap = this.checked;">
  //사용자가 체크박스를 체크하거나 체크해제할때마다 onchange속성에 지정된 js코드를 실행한다.
  ```

  위와같이 보통 이벤트핸들러 속성은 간단히 지정만 하거나 다른 곳에 정의한 함수를 단순히 호출하는 것으로 구성한다.
  이렇게 함으로서 실제 스크립트 코드를 <script> 태그 안에 유지가능하고 자바스크립트와 html이 섞이는 현상을 줄일 수 있다.

##### 13.2.5 url 안의 자바스크립트 (386p)

  *
